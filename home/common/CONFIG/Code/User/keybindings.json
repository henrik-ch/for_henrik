// Place your key bindings in this file to override the defaults
[
    // =====================================
    // MARKDOWN SNIPPETS
    // =====================================
    {
        "key": "ctrl+i s",
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus && !editorReadonly"
    },
    /**
    * Central
    **/
    {
        "key": "ctrl+space",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+g f",
        "command": "workbench.action.quickOpen"
    },
    /**
    * Panel bindings (CTRL+K)
    **/
    {
        "key": "ctrl+k esc",
    },
    {
        "key": "ctrl+k e",
        "command": "workbench.view.explorer"
    },
    {
        "key": "alt+g g",
        "command": "workbench.view.scm"
    },
    {
        "key": "ctrl+k d",
        "command": "workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+k x",
        "command": "workbench.view.extensions"
    },
    {
        "key": "ctrl+k b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+n",
        "command": "explorer.newFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "ctrl+alt+right",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorFocus && editorHasSelection"
    },
    /**
    * Editor navigation (CTRL+W)
    **/
    {
        "key": "ctrl+w rightArrow",
        "command": "workbench.action.splitEditorRight",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+w leftArrow",
        "command": "workbench.action.splitEditorLeft",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+w alt+w",
        "command": "workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+w shift+w",
        "command": "workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+q g",
        "command": "workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+g n",
        "command": "workbench.action.openPreviousRecentlyUsedEditor"
    },
    {
        "key": "ctrl+w space",
        "command": "workbench.action.showAllEditorsByMostRecentlyUsed"
    },
    /**
    * Navigation (CTRL+G)
    **/
    {
        "key": "ctrl+g s",
        "command": "workbench.action.gotoSymbol",
        "when": "editorTextFocus",
    },
    {
        "key": "ctrl+g ctrl+s",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+g d",
        "command": "editor.action.goToDeclaration",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+g upArrow",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+g g",
        "command": "workbench.action.gotoLine"
    },
    /**
    * Dev tools (CTRL+D)
    */
    {
        "key": "ctrl+d d",
        "command": "workbench.action.toggleDevTools"
    },
    /**
    * Find/Replace (CTRL+F)
    */
    {
        "key": "ctrl+f r",
        "command": "toggleFindRegex",
        "when": "findWidgetVisible && inputFocus && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible",
    },
    {
        "key": "ctrl+f w",
        "command": "toggleFindWholeWord",
        "when": "findWidgetVisible && inputFocus && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible",
    },
    {
        "key": "ctrl+f u",
        "command": "toggleFindCaseSensitive",
        "when": "findWidgetVisible && inputFocus && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible",
    },
    {
        "key": "ctrl+f p",
        "command": "togglePreserveCase",
        "when": "findWidgetVisible && inputFocus && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible",
    },
    // Find+Replace in a selection
    {
        "key": "ctrl+f s",
        "command": "runCommands",
        "args": {
            "commands": [
                "closeFindWidget",
                "editor.action.startFindReplaceAction",
                "toggleFindInSelection"
            ]
        },
        "when": "editorHasSelection && (editorFocus || editorIsOpen) && !editorReadonly"
    },
    // Find+Replace with a selection
    {
        "key": "ctrl+f f",
        "command": "runCommands",
        "args": {
            "commands": [
                "closeFindWidget",
                "editor.action.startFindReplaceAction",
                "actions.findWithSelection"
            ]
        },
        "when": "editorHasSelection && (editorFocus || editorIsOpen) && !editorReadonly"
    },
    // Open Find+Replace
    {
        "key": "ctrl+f f",
        "command": "runCommands",
        "args": {
            "commands": [
                "closeFindWidget",
                "editor.action.startFindReplaceAction",
            ]
        },
        "when": "!editorHasSelection && (editorFocus || editorIsOpen)  && !editorReadonly"
    },
    // Find in a selection
    {
        "key": "ctrl+f s",
        "command": "runCommands",
        "args": {
            "commands": [
                "closeFindWidget",
                "actions.find",
                "toggleFindInSelection"
            ]
        },
        "when": "editorHasSelection && (editorFocus || editorIsOpen) && editorReadonly"
    },
    // Find with a selection
    {
        "key": "ctrl+f f",
        "command": "runCommands",
        "args": {
            "commands": [
                "closeFindWidget",
                "actions.findWithSelection"
            ]
        },
        "when": "editorHasSelection && (editorFocus || editorIsOpen) && editorReadonly"
    },
    // Open Find
    {
        "key": "ctrl+f f",
        "command": "runCommands",
        "args": {
            "commands": [
                "closeFindWidget",
                "actions.find",
            ]
        },
        "when": "!editorHasSelection && (editorFocus || editorIsOpen) && editorReadonly"
    },
    /**
    * Hide Toaster Notifications
    **/
    {
        "key": "escape",
        "command": "notifications.hideToasts",
        "when": "notificationToastsVisible"
    },
    {
        "key": "alt+a",
        "command": "workbench.action.toggleActivityBarVisibility"
    },
    /**
    * Git: save files and prepare commit
    */
    {
        "key": "alt+shift+s",
        "command": "runCommands",
        "args": {
            "commands": [
                "saveAll",
                "git.stageAll",
                "git.commitAll",
            ]
        }
    },
    {
        "key": "alt+s",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.files.save",
                "git.stageChange",
                "git.commitStaged",
            ]
        }
    },
    /**
    * language server related
    */
    {
        "key": "ctrl+s",
        "command": "runCommands",
        "args": {
            "commands": [
                "saveAll",
                // "rust-analyzer.runFlycheck",
                "editor.action.formatDocument"
            ]
        },
        "when": "editorLangId == 'rust'",
    },
    {
        "key": "ctrl+s",
        "command": "runCommands",
        "args": {
            "commands": [
                "saveAll",
                "editor.action.formatDocument"
            ]
        },
        "when": "editorLangId != 'rust'",
    },
    {
        "key": "ctrl+.",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+.",
        "command": "editor.action.triggerSuggest"
    },
    {
        "key": "ctrl+shift+h",
        "command": "toggle",
        "args": {
            "id": "inlayHints",
            "value": [
                {
                    "editor.inlayHints.enabled": "on"
                },
                {
                    "editor.inlayHints.enabled": "off"
                }
            ]
        },
        "when": "editorTextFocus",
    },
    {
        "key": "ctrl+e e",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "tab",
        "command": "runCommands",
        "args": {
            "commands": [
                "acceptSelectedSuggestion",
            ]
        },
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    /**
    Disabled stuff
    **/
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+k p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+f",
        "command": "-actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "alt+up",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+up",
        "command": "-scm.forceViewPreviousCommit",
        "when": "scmRepository"
    },
    {
        "key": "alt+pageup",
        "command": "-scrollPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "alt+up",
        "command": "-showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "alt+p",
        "command": "-togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "alt+p",
        "command": "-toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+p",
        "command": "-keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings"
    },
    {
        "key": "alt+o",
        "command": "-C_Cpp.SwitchHeaderSource",
        "when": "editorTextFocus && editorLangId == 'c' || editorTextFocus && editorLangId == 'cpp' || editorTextFocus && editorLangId == 'cuda-cpp'"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.editor.nextChange",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "alt+f8",
        "command": "-editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "alt+f9",
        "command": "-editor.action.nextCommentThreadAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.editor.previousChange",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+alt+f9",
        "command": "-editor.action.previousCommentThreadAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+f8",
        "command": "-editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "alt+j alt+e",
        "command": "-language-julia.changeCurrentEnvironment",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "alt+j alt+w",
        "command": "-REPLVariables.focus"
    },
    {
        "key": "alt+j alt+n",
        "command": "-language-julia.newJuliaFile"
    },
    {
        "key": "alt+j alt+r",
        "command": "-language-julia.restartREPL"
    },
    {
        "key": "alt+j alt+m",
        "command": "-language-julia.chooseModule",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "alt+j alt+d",
        "command": "-language-julia.show-documentation",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "alt+j alt+p",
        "command": "-language-julia.show-plotpane"
    },
    {
        "key": "alt+j alt+o",
        "command": "-language-julia.startREPL"
    },
    {
        "key": "alt+j alt+k",
        "command": "-language-julia.stopREPL"
    },
    {
        "key": "ctrl+l ctrl+j",
        "command": "latex-workshop.synctex",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && !virtualWorkspace && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+l alt+j",
        "command": "-latex-workshop.synctex",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && !virtualWorkspace && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+e j",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+e h",
        "command": "editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+f8",
        "command": "-editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+e f",
        "command": "errorLens.searchForProblem"
    },
    {
        "key": "ctrl+/ w",
        "command": "rewrap.rewrapComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+q",
        "command": "-rewrap.rewrapComment",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+g .",
        "command": "workbench.action.navigateForwardInNavigationLocations",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+g up",
        "command": "workbench.action.navigateForwardInEditLocations",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+g down",
        "command": "workbench.action.navigateBackInEditLocations",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+g ,",
        "command": "workbench.action.navigateBackInNavigationLocations",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+q q",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+k ctrl+q",
        "command": "-workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-workbench.action.search.toggleQueryDetails",
        "when": "inSearchEditor || searchViewletFocus"
    },
    {
        "key": "ctrl+j m",
        "command": "rust-analyzer.expandMacro",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+j d",
        "command": "rust-analyzer.openDocs",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+j p",
        "command": "rust-analyzer.parentModule",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-rust-analyzer.parentModule",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenNavigateNextInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+q a",
        "command": "workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+q t",
        "command": "workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+shift+q",
        "command": "-workbench.action.quickOpenNavigatePreviousInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+k ctrl+s",
        "command": "-workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+s",
        "command": "-workbench.action.files.save"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "-workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "command": "-git.stageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+e a",
        "command": "errorLens.toggle"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "alt+m",
        "command": "-extension.minifyJSON"
    },
    {
        "key": "ctrl+alt+m",
        "command": "-extension.prettyJSON"
    },
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    {
        "key": "alt+right",
        "command": "cursorLineEnd",
        "when": "editorTextFocus && multiCursorModifier"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+right",
        "command": "cursorLineEndSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openFolder",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.gotoSymbol"
    },
    {
        "key": "ctrl+alt+o",
        "command": "-workbench.action.remote.showMenu"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.terminal.openDetectedLink",
        "when": "terminalAccessibleBufferFocus && terminalHasBeenCreated || terminalFocus && terminalHasBeenCreated"
    },
    {
        "key": "ctrl+; ctrl+o",
        "command": "-testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "ctrl+o right",
        "command": "workbench.action.compareEditor.openSide",
        "when": "inDiffEditor"
    },
    {
        "key": "ctrl+k shift+o",
        "command": "-workbench.action.compareEditor.openSide",
        "when": "inDiffEditor"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+f shift+f",
        "command": "workbench.action.files.openLocalFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openLocalFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "right",
        "command": "editor.action.accessibleDiffViewer.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "f7",
        "command": "-editor.action.accessibleDiffViewer.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "left",
        "command": "editor.action.accessibleDiffViewer.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.accessibleDiffViewer.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "ctrl+g down",
        "command": "editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+alt+f3",
        "command": "-editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+escape",
        "command": "-closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "ctrl+r",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "-editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+r",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f2",
        "command": "-renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "alt+k b",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+alt+b",
        "command": "-workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k left",
        "command": "-views.moveViewLeft",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k left",
        "command": "workbench.action.movePanelToSecondarySideBar"
    },
    {
        "key": "alt+k right",
        "command": "workbench.action.moveSecondarySideBarToPanel"
    },
    {
        "key": "ctrl+k o",
        "command": "outline.toggleVisibility"
    },
    {
        "key": "ctrl+i",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+i",
        "command": "-focusSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+i",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+k i",
        "command": "-inlineChat.start",
        "when": "inlineChatHasProvider && !editorReadonly"
    },
    {
        "key": "ctrl+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+d h",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+d d",
        "command": "workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+i",
        "command": "-inlineChat.start",
        "when": "inlineChatHasProvider && !editorReadonly"
    },
    {
        "key": "down",
        "command": "-inlineChat.focus",
        "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'above'"
    },
    {
        "key": "up",
        "command": "-inlineChat.focus",
        "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'"
    },
    {
        "key": "enter",
        "command": "-inlineChat.accept",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatVisible && !inlineChatEmpty"
    },
    {
        "key": "down",
        "command": "-inlineChat.arrowOutDown",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
    },
    {
        "key": "up",
        "command": "-inlineChat.arrowOutUp",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
    },
    {
        "key": "escape",
        "command": "-inlineChat.cancel",
        "when": "inlineChatHasProvider && inlineChatVisible"
    },
    {
        "key": "escape",
        "command": "-inlineChat.discard",
        "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit"
    },
    {
        "key": "ctrl+down",
        "command": "-inlineChat.nextFromHistory",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorEnd"
    },
    {
        "key": "ctrl+up",
        "command": "-inlineChat.previousFromHistory",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorStart"
    },
    {
        "key": "escape",
        "command": "-inlineChat.stop",
        "when": "inlineChatHasActiveRequest && inlineChatHasProvider && inlineChatVisible && !inlineChatEmpty"
    },
    {
        "key": "ctrl+z",
        "command": "-inlineChat.unstash",
        "when": "inlineChatHasStashedSession && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "-chat.action.acceptInput",
        "when": "inChatInput && textInputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "-workbench.action.chat.clear",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "f9",
        "command": "-workbench.action.chat.nextCodeBlock",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "ctrl+f9",
        "command": "-workbench.action.chat.nextFileTree",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "shift+f9",
        "command": "-workbench.action.chat.previousCodeBlock",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "ctrl+shift+f9",
        "command": "-workbench.action.chat.previousFileTree",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-workbench.action.chat.runInTerminal",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "ctrl+up",
        "command": "-chat.action.focus",
        "when": "inChatInput && textInputFocus"
    },
    {
        "key": "ctrl+down",
        "command": "-workbench.action.chat.focusInput",
        "when": "inChat && !editorFocus"
    },
    {
        "key": "delete",
        "command": "-workbench.action.chat.remove",
        "when": "inChat && !inChatInput"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.quickchat.toggle",
        "when": "hasChatProvider"
    },
    {
        "key": "ctrl+,",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+g j",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "ctrl+g j",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "ctrl+g up",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "ctrl+; ctrl+i",
        "command": "-testing.toggleInlineTestOutput"
    },
    {
        "key": "ctrl+.",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+.",
        "command": "-acceptSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "shift+escape",
        "command": "-hideCodeActionWidget",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+down",
        "command": "-selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+up",
        "command": "-selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "right",
        "command": "previewSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "-previewSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "shift+escape",
        "command": "-hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+.",
        "command": "editor.action.autoFix",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\\\\\\\s|^)quickfix\\\\\\\\b/"
    },
    {
        "key": "shift+alt+.",
        "command": "-editor.action.autoFix",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\\\\\\\s|^)quickfix\\\\\\\\b/"
    },
    {
        "key": "ctrl+shift+;",
        "command": "-breadcrumbs.focus",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "ctrl+b",
        "command": "breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "ctrl+right",
        "command": "-breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+right",
        "command": "-breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "down",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+b",
        "command": "breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "ctrl+left",
        "command": "cursorWordLeft",
        "when": "!(breadcrumbsActive && breadcrumbsVisible) && textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+left",
        "command": "-cursorWordLeft",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+right",
        "command": "cursorWordEndRight",
        "when": "!(breadcrumbsActive && breadcrumbsVisible) && textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+right",
        "command": "-cursorWordEndRight",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+g b",
        "command": "rust-analyzer.matchingBrace",
        "when": "editorLangId=='rust'"
    },
    {
        "key": "ctrl+enter",
        "command": "-interactive.acceptChanges",
        "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatVisible && config.inlineChat.editMode != 'preview'"
    },
    {
        "key": "ctrl+alt+j",
        "command": "rust-analyzer.joinLines",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-rust-analyzer.joinLines",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+shift+j",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+shift+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+shift+f h",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+f f",
        "command": "workbench.action.findInFiles"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.view.search",
        "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.terminal.searchWorkspace",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-workbench.action.output.toggleOutput",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "shift+alt+'",
        "command": "editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+l",
        "command": "-editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+up",
        "command": "-notebook.cell.focusOutOutput",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+up",
        "command": "-editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.accessibleBufferGoToPreviousCommand",
        "when": "terminalAccessibleBufferFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalAccessibleBufferFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.focusAccessibleBuffer",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated && terminalTabFocusMode || accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated && !terminalAccessibleBufferFocus || accessibilityModeEnabled && terminalFocus && terminalProcessSupported && terminalTabFocusMode || accessibilityModeEnabled && terminalFocus && terminalProcessSupported && !terminalAccessibleBufferFocus"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.scrollToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-workbench.action.terminal.selectToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+shift+[",
        "command": "-editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+' a",
        "command": "editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+0",
        "command": "-editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+' s",
        "command": "editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+-",
        "command": "-editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+; ;",
        "command": "editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+]",
        "command": "-editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+; a",
        "command": "editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+j",
        "command": "-editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+=",
        "command": "-editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+u",
        "command": "-cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "alt+' shift+s",
        "command": "editor.createFoldingRangeFromSelection",
        "when": "editorHasSelection && editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+,",
        "command": "-editor.createFoldingRangeFromSelection",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+1",
        "command": "-editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+2",
        "command": "-editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+3",
        "command": "-editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+4",
        "command": "-editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+5",
        "command": "-editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+6",
        "command": "-editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+7",
        "command": "-editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+' shift+'",
        "command": "editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+[",
        "command": "-editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+.",
        "command": "-editor.removeManualFoldingRanges",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k f",
        "command": "-workbench.action.closeFolder",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "key": "ctrl+j r",
        "command": "rust-analyzer.ssr"
    },
    {
        "key": "ctrl+k u",
        "command": "-workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "ctrl+l ctrl+u",
        "command": "-latex-workshop.shortcut.underline",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^latex$|^latex-expl3$|^rsweave$|^jlweave$|^pweave$/"
    },
    {
        "key": "alt+' '",
        "command": "editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+; s",
        "command": "editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+; shift+;",
        "command": "editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+]",
        "command": "-editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+e a",
        "command": "workbench.actions.view.toggleProblems"
    },
    {
        "key": "ctrl+e v",
        "command": "workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+; ctrl+e",
        "command": "-testing.debugFailTests"
    },
    {
        "key": "ctrl+; e",
        "command": "-testing.reRunFailTests"
    },
    {
        "key": "ctrl+e",
        "command": "-editor.action.toggleScreenReaderAccessibilityMode",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "ctrl+k e",
        "command": "-workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "ctrl+e",
        "command": "keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+k ctrl+e",
        "command": "-keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+g j",
        "command": "editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+down",
        "command": "-editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "end",
        "command": "-editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+g k",
        "command": "editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "home",
        "command": "-editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e j",
        "command": "editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pagedown",
        "command": "-editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e k",
        "command": "editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pageup",
        "command": "-editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e ctrl+down",
        "command": "editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "down",
        "command": "-editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e ctrl+left",
        "command": "editor.action.scrollLeftHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "left",
        "command": "-editor.action.scrollLeftHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e ctrl+right",
        "command": "editor.action.scrollRightHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "right",
        "command": "-editor.action.scrollRightHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e ctrl+up",
        "command": "editor.action.scrollUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "up",
        "command": "-editor.action.scrollUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+j t",
        "command": "editor.action.peekTypeDefinition"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "-editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+/ /",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+/",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+/ b",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+space",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-git.revertSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "ctrl+k ctrl+n",
        "command": "-git.unstageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "alt+g i",
        "command": "git.ignore"
    },
    {
        "key": "alt+g c",
        "command": "git.commit"
    },
    {
        "key": "alt+g shift+c",
        "command": "git.commitAll"
    },
    {
        "key": "alt+g z",
        "command": "git.undoCommit"
    },
    {
        "key": "alt+g b",
        "command": "git.branch"
    },
    {
        "key": "alt+g space",
        "command": "git.checkout"
    },
    {
        "key": "alt+g o",
        "command": "git.stashPop"
    },
    {
        "key": "alt+g u",
        "command": "git.stash"
    },
    {
        "key": "ctrl+enter",
        "command": "git.commitMessageAccept",
        "when": "editorLangId == 'git-commit'"
    },
    {
        "key": "alt+g shift+s",
        "command": "git.stage"
    },
    {
        "key": "ctrl+k s",
        "command": "-saveAll"
    },
    {
        "key": "alt+g s",
        "command": "git.stageChange"
    },
    {
        "key": "alt+g shift+q",
        "command": "git.unstageAll"
    },
    {
        "key": "alt+g q",
        "command": "git.unstage"
    },
    {
        "key": "ctrl+.",
        "command": "-problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+.",
        "command": "-workbench.action.terminal.showQuickFixes",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+u a",
        "command": "diffEditor.collapseAllUnchangedRegions",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+u z",
        "command": "diffEditor.showAllUnchangedRegions",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+shift+i",
        "command": "merge-conflict.accept.all-incoming",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+c",
        "command": "merge-conflict.accept.current",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+shift+c",
        "command": "merge-conflict.accept.all-current",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+i",
        "command": "merge-conflict.accept.incoming",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+g j",
        "command": "merge-conflict.next",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+g left",
        "command": "merge-conflict.previous",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+g k",
        "command": "merge.goToNextUnhandledConflict",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+g j",
        "command": "merge.goToPreviousUnhandledConflict",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+; a",
        "command": "-testing.runAll"
    },
    {
        "key": "ctrl+g k",
        "command": "testing.goToNextMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "ctrl+g j",
        "command": "testing.goToPreviousMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "ctrl+t p",
        "command": "rust-analyzer.peekTests"
    },
    {
        "key": "ctrl+t t",
        "command": "rust-analyzer.runSingle"
    },
    {
        "key": "alt+' /",
        "command": "editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+g k",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+p s",
        "command": "workbench.action.openGlobalSettings"
    },
    {
        "key": "ctrl+p k",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+d b",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "ctrl+k t",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+o d",
        "command": "workbench.action.files.openFolderInNewWindow"
    },
    {
        "key": "ctrl+q shift+q",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "ctrl+o a",
        "command": "workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+o w",
        "command": "workbench.action.openWorkspaceInNewWindow"
    },
    {
        "key": "ctrl+t c",
        "command": "workbench.action.terminal.clear",
        "when": "terminalFocus"
    },
    {
        "key": "alt+g d",
        "command": "toggle.diff.renderSideBySide"
    },
    {
        "key": "alt+c",
        "command": "editor.action.showOrFocusStandaloneColorPicker"
    },
    {
        "key": "ctrl+i w",
        "command": "markdown.editor.insertLinkFromWorkspace",
        "when": "editorFocus && editorLangId == 'markdown'"
    },
    {
        "key": "alt+v s",
        "command": "markdown-preview-enhanced.syncPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "alt+v v",
        "command": "markdown-preview-enhanced.openPreviewToTheSide",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "alt+f f",
        "command": "markdownlint.fixAll"
    },
    {
        "key": "shift+alt+f",
        "command": "markdownlint.lintWorkspace",
        "when": "editorFocus && editorLangId == 'markdown'"
    },
    {
        "key": "alt+f d",
        "command": "markdownlint.toggleLinting",
        "when": "editorFocus && editorLangId == 'markdown'"
    },
    // =================================
    // REMOVED KEYBINDINGS
    // =================================
    {
        "key": "ctrl+shift+s",
        "command": "-markdown-preview-enhanced.syncPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+v",
        "command": "markdown-preview-enhanced.openPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-markdown-preview-enhanced.openPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "m",
        "command": "-notebook.cell.changeToMarkdown",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'"
    },
    {
        "key": "ctrl+k v",
        "command": "-markdown-preview-enhanced.openPreviewToTheSide",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "shift+enter",
        "command": "-markdown-preview-enhanced.runCodeChunk",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-markdown-preview-enhanced.runAllCodeChunks",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+/",
        "command": "-workbench.action.chat.runInTerminal",
        "when": "accessibilityModeEnabled && hasChatProvider && inChat"
    },
    {
        "key": "ctrl+/",
        "command": "-editor.action.accessibleViewAcceptInlineCompletion",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'"
    },
    {
        "key": "alt+' shift+a",
        "command": "editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+8",
        "command": "-editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "left",
        "command": "-notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+shift+[",
        "command": "-notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "right",
        "command": "-notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+shift+]",
        "command": "-notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "alt+; a",
        "command": "editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+9",
        "command": "-editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+g ctrl+u",
        "command": "editor.gotoParentFold"
    },
    {
        "key": "ctrl+g ctrl+j",
        "command": "editor.gotoPreviousFold"
    },
    {
        "key": "ctrl+shift+,",
        "command": "-editor.action.inPlaceReplace.up",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "ctrl+alt+j",
        "command": "-editor.action.insertSnippet",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'powershell'"
    },
    {
        "key": "alt+f8",
        "command": "-testing.goToNextMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+alt+f8",
        "command": "-testing.goToPreviousMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "ctrl+; f",
        "command": "-testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+/",
        "command": "-editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+/",
        "command": "-liveshare.followToTheSide",
        "when": "liveshare:hasCollaborators"
    },
    {
        "key": "ctrl+/",
        "command": "-toggleExplainMode",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+/",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+k d",
        "command": "-workbench.files.action.compareWithSaved"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "ctrl+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "alt+f4",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+k r",
        "command": "-workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "alt+c",
        "command": "-toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+c",
        "command": "-toggleSearchCaseSensitive",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+c",
        "command": "-toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+c",
        "command": "-workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+k v",
        "command": "-markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+k s",
        "command": "-workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "ctrl+s",
        "command": "-issue.createIssueFromFile",
        "when": "!issues.creatingFromFile && resourceScheme == 'newIssue' && config.files.autoSave != 'off'"
    },
    {
        "key": "ctrl+alt+s d",
        "command": "-data.preview.on.side"
    },
    {
        "key": "ctrl+k ctrl+shift+w",
        "command": "-workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+g k",
        "command": "jumpToNextSnippetPlaceholder",
        "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
    },
    {
        "key": "tab",
        "command": "-jumpToNextSnippetPlaceholder",
        "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
    },
    {
        "key": "ctrl+g j",
        "command": "jumpToPrevSnippetPlaceholder",
        "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
    },
    {
        "key": "shift+tab",
        "command": "-jumpToPrevSnippetPlaceholder",
        "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+k p",
        "command": "-workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.terminal.goToRecentDirectory",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+k ctrl+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quit"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "w",
        "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+g m",
        "command": "workbench.action.openNextRecentlyUsedEditor"
    },
    {
        "key": "ctrl+g w",
        "command": "workbench.action.addRootFolder"
    },
    {
        "key": "ctrl+g shift+w",
        "command": "workbench.action.removeRootFolder"
    },
    {
        "key": "alt+e u",
        "command": "cSpell.addWordToUserSettings"
    },
    {
        "key": "alt+e f",
        "command": "cSpell.addWordToFolderSettings"
    },
    {
        "key": "alt+e w",
        "command": "cSpell.addWordToWorkspaceSettings"
    },
    {
        "key": "ctrl+g v",
        "command": "cSpell.goToNextSpellingIssueAndSuggest"
    },
    {
        "key": "ctrl+g c",
        "command": "cSpell.goToPreviousSpellingIssueAndSuggest"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+g j",
        "command": "references-view.prev",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "shift+f4",
        "command": "-references-view.prev",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "ctrl+g k",
        "command": "references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "f4",
        "command": "-references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "ctrl+q o",
        "command": "workbench.action.closeEditorsInOtherGroups"
    },
    {
        "key": "ctrl+e t",
        "command": "errorLens.toggleInlineMessage"
    },
    {
        "key": "ctrl+g right",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+g left",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "ctrl+alt+-",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "ctrl+g k",
        "command": "goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f12",
        "command": "-goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "-goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "ctrl+g j",
        "command": "goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f12",
        "command": "-goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f4",
        "command": "-goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "ctrl+g j",
        "command": "goToPreviousReferenceFromEmbeddedEditor",
        "when": "editorHasReferenceProvider && isInEmbeddedEditor && !editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "ctrl+g k",
        "command": "goToNextReferenceFromEmbeddedEditor",
        "when": "editorHasReferenceProvider && !editorTextFocus && !inReferenceSearchEditor && isInEmbeddedEditor"
    },
    {
        "key": "ctrl+f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+g j",
        "command": "editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "f7",
        "command": "-editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "ctrl+g ctrl+k",
        "command": "editor.gotoNextFold",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+g j",
        "command": "editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "ctrl+g k",
        "command": "editor.action.nextCommentingRange",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "key": "ctrl+k ctrl+alt+down",
        "command": "-editor.action.nextCommentingRange",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "key": "ctrl+g j",
        "command": "editor.action.previousCommentingRange",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "key": "ctrl+k ctrl+alt+up",
        "command": "-editor.action.previousCommentingRange",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "key": "ctrl+g k",
        "command": "workbench.action.terminal.accessibleBufferGoToNextCommand",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "alt+down",
        "command": "-workbench.action.terminal.accessibleBufferGoToNextCommand",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "ctrl+g j",
        "command": "workbench.action.terminal.accessibleBufferGoToPreviousCommand",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "alt+up",
        "command": "-workbench.action.terminal.accessibleBufferGoToPreviousCommand",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "enter",
        "command": "-editor.action.goToFocusedStickyScrollLine",
        "when": "stickyScrollFocused"
    },
    {
        "key": "ctrl+d k",
        "command": "editor.debug.action.goToNextBreakpoint"
    },
    {
        "key": "ctrl+d j",
        "command": "editor.debug.action.goToPreviousBreakpoint"
    },
    {
        "key": "ctrl+g ctrl+d",
        "command": "editor.action.revealDeclaration"
    }
]
// REFERENCE - WHEN CLAUSE
// CppReferencesView.canMove: true
// CppReferencesView.defaultViewLocation: true
// CppSshTargetsView.canMove: true
// CppSshTargetsView.defaultViewLocation: true
// LinkedEditingInputVisible: false
// PowerShellCommands.active: true
// PowerShellCommands.canMove: true
// PowerShellCommands.defaultViewLocation: true
// PowerShellCommands.visible: true
// ReposManagerStateContext: "RepositoriesLoaded"
// acceptSuggestionOnEnter: true
// accessibilityModeEnabled: false
// activeAuxiliary: ""
// activeCursorHasCommentingRange: false
// activeCustomEditorId: ""
// activeEditor: "workbench.editors.files.textFileEditor"
// activeEditorAvailableEditorIds: "default"
// activeEditorCanRevert: true
// activeEditorCanSplitInGroup: true
// activeEditorCanToggleReadonly: true
// activeEditorGroupEmpty: false
// activeEditorGroupIndex: 1
// activeEditorGroupLast: true
// activeEditorGroupLocked: false
// activeEditorHasCommentingRange: false
// activeEditorIsDirty: false
// activeEditorIsFirstInGroup: true
// activeEditorIsLastInGroup: false
// activeEditorIsNotPreview: false
// activeEditorIsPinned: false
// activeEditorIsReadonly: false
// activeLogOutput: false
// activeOutputChannel: "tasks"
// activePanel: ""
// activeViewlet: "workbench.view.explorer"
// activeWebviewPanelId: ""
// atEndOfWord: false
// autoSaveAfterShortDelayContext: false
// auxiliaryBarFocus: false
// auxiliaryBarVisible: false
// breadcrumbsActive: false
// breadcrumbsPossible: true
// breadcrumbsVisible: true
// breakpointWidgetVisible: false
// breakpointsExist: false
// callHierarchyVisible: false
// canNavigateBack: true
// canNavigateBackInEditLocations: false
// canNavigateBackInNavigationLocations: true
// canNavigateForward: false
// canNavigateForwardInEditLocations: false
// canNavigateForwardInNavigationLocations: false
// canNavigateToLastEditLocation: false
// canNavigateToLastNavigationLocation: true
// canRedo: false
// canReopenClosedEditor: false
// canToggleWordWrap: true
// canUndo: false
// cancellableOperation: false
// config.C_Cpp.debugShortcut: true
// config.C_Cpp.intelliSenseEngine: "default"
// config.breadcrumbs.enabled: true
// config.debug.toolBarLocation: "floating"
// config.editor.inlineSuggest.showToolbar: "always"
// config.editor.renderControlCharacters: true
// config.editor.renderWhitespace: "none"
// config.extensions.autoUpdate: true
// config.files.autoSave: "afterDelay"
// config.git.enabled: true
// config.latex-workshop.bind.enter.key: true
// config.liveshare.accessibility.accessibilityFeaturesEnabled: "auto"
// config.notebook.globalToolbar: true
// config.notebook.navigation.allowNavigateToSurroundingCells: true
// config.powershell.buttons.showRunButtons: true
// config.powershell.sideBar.CommandExplorerVisibility: true
// config.rust-analyzer.showDependenciesExplorer: true
// config.security.workspace.trust.enabled: true
// config.terminal.integrated.tabs.enabled: true
// config.terminal.integrated.tabs.showActions: "singleTerminalOrNarrow"
// config.terminal.integrated.tabs.showActiveTerminal: "singleTerminalOrNarrow"
// config.window.menuBarVisibility: "classic"
// config.window.titleBarStyle: "custom"
// config.workbench.activityBar.location: "hidden"
// config.workbench.editor.editorActionsLocation: "default"
// config.workbench.editor.enablePreview: true
// config.workbench.editor.showTabs: "multiple"
// config.workbench.sideBar.location: "right"
// config.workbench.statusBar.visible: true
// currentProfile: "__default__profile__"
// customExecutionSupported: true
// debugExtensionAvailable: true
// debugSetExpressionSupported: false
// debugSetVariableSupported: false
// debugState: "inactive"
// debugUx: "simple"
// debuggersAvailable: true
// dirtyDiffVisible: false
// dirtyWorkingCopies: false
// disassembleRequestSupported: false
// disassemblyViewFocus: false
// downloadUrl: "https://code.visualstudio.com"
// editSessionsCount: 0
// editSessionsPending: false
// editSessionsShowView: false
// editSessionsSignedIn: false
// editorColumnSelection: false
// editorFocus: true
// editorHasCallHierarchyProvider: true
// editorHasCodeActionsProvider: true
// editorHasCodeLensProvider: true
// editorHasCompletionItemProvider: true
// editorHasDeclarationProvider: true
// editorHasDefinitionProvider: true
// editorHasDocumentFormattingProvider: true
// editorHasDocumentHighlightProvider: true
// editorHasDocumentSelectionFormattingProvider: false
// editorHasDocumentSymbolProvider: true
// editorHasHoverProvider: true
// editorHasImplementationProvider: true
// editorHasInlayHintsProvider: true
// editorHasMultipleDocumentFormattingProvider: false
// editorHasMultipleDocumentSelectionFormattingProvider: false
// editorHasMultipleSelections: false
// editorHasReferenceProvider: true
// editorHasRenameProvider: true
// editorHasSelection: false
// editorHasSignatureHelpProvider: true
// editorHasTypeDefinitionProvider: true
// editorHasTypeHierarchyProvider: false
// editorHoverFocused: false
// editorHoverVisible: false
// editorId: "vs.editor.ICodeEditor:1"
// editorIsOpen: true
// editorLangId: "rust"
// editorPartMaximizedEditorGroup: false
// editorPartMultipleEditorGroups: false
// editorPinnedAndUnpinnedTabsVisible: false
// editorReadonly: false
// editorSimpleInput: false
// editorTabMovesFocus: false
// editorTabsVisible: true
// editorTextFocus: true
// editorWordWrap: true
// emptyWorkspaceSupport: true
// enableSyncActivityViews: false
// enableSyncConflictsView: false
// enterMultiRootWorkspaceSupport: true
// exceptionWidgetVisible: false
// explorerResourceAvailableEditorIds: "default"
// explorerResourceIsFolder: false
// explorerResourceIsRoot: false
// explorerResourceMoveableToTrash: true
// explorerResourceReadonly: false
// explorerViewletCompressedFirstFocus: true
// explorerViewletCompressedFocus: false
// explorerViewletCompressedLastFocus: true
// explorerViewletVisible: true
// expressionSelected: false
// extensions.recommendedList.canMove: false
// extensions.recommendedList.defaultViewLocation: true
// fileListLayout:flat: false
// findInputFocussed: false
// findWidgetVisible: false
// focusedCustomEditorIsEditable: false
// focusedSessionIsAttach: false
// focusedSessionIsNoDebug: false
// focusedStackFrameHasInstructionReference: false
// focusedView: ""
// foldersViewVisible: true
// foldingEnabled: true
// forwardedPortsViewEnabled: true
// git-base.gitEnabled: true
// git.closedRepositoryCount: 0
// git.mergeChanges: []
// git.parentRepositoryCount: 0
// git.state: "initialized"
// git.unsafeRepositoryCount: 0
// gitHubOpenRepositoryCount: 1
// gitOpenRepositoryCount: "1"
// gitVersion2.35: true
// github-actions.current-branch.active: true
// github-actions.current-branch.canMove: true
// github-actions.current-branch.defaultViewLocation: true
// github-actions.current-branch.visible: true
// github-actions.empty-view.active: false
// github-actions.empty-view.canMove: true
// github-actions.empty-view.defaultViewLocation: true
// github-actions.empty-view.visible: false
// github-actions.has-repos: true
// github-actions.internet-access: true
// github-actions.settings.active: true
// github-actions.settings.canMove: true
// github-actions.settings.defaultViewLocation: true
// github-actions.settings.visible: true
// github-actions.signed-in: true
// github-actions.workflows.active: true
// github-actions.workflows.canMove: true
// github-actions.workflows.defaultViewLocation: true
// github-actions.workflows.visible: true
// github.hasGitHubRepo: true
// github:activePRCount: 0
// github:activePullRequest.canMove: true
// github:activePullRequest.defaultViewLocation: true
// github:activePullRequest:welcome.canMove: true
// github:activePullRequest:welcome.defaultViewLocation: true
// github:authenticated: true
// github:compareChangesCommits.canMove: true
// github:compareChangesCommits.defaultViewLocation: true
// github:compareChangesFiles.canMove: true
// github:compareChangesFiles.defaultViewLocation: true
// github:createPullRequestWebview.canMove: true
// github:createPullRequestWebview.defaultViewLocation: true
// github:focusedReview: true
// github:hasGitHubRemotes: true
// github:inReviewMode: false
// github:initialized: true
// github:login.canMove: true
// github:login.defaultViewLocation: true
// github:reposInReviewMode: []
// github:reposNotInReviewMode: ['file:///home/bzm3r/bpaf']
// github:stateValidated: true
// github:unviewedFiles: []
// github:viewedFiles: []
// groupEditorsCount: 5
// hasChatProvider: false
// hasConflicts: false
// hasDebugged: false
// hasGallery: true
// hasLocalServer: true
// hasMultipleNewFileEntries: false
// hasOtherSuggestions: false
// hasOutdatedExtensions: false
// hasProfiles: false
// hasRemoteServer: false
// hasSpeechProvider: false
// hasSymbols: false
// hasWebFileSystemAccess: true
// hasWebServer: false
// hasWordHighlights: false
// inCommandsPicker: false
// inDebugMode: false
// inDiffEditor: false
// inKeybindings: false
// inKeybindingsSearch: false
// inQuickOpen: false
// inRustProject: true
// inTerminalRunCommandPicker: false
// inZenMode: false
// inlineChatHasActiveRequest: false
// inlineChatHasProvider: false
// inlineChatLastFeedbackKind: ""
// inlineChatSupportIssueReporting: false
// inlineSuggestionHasIndentation: false
// inlineSuggestionHasIndentationLessThanTabSize: true
// inlineSuggestionVisible: false
// inputFocus: true
// interactiveWindowOpen: false
// isAuxiliaryEditorPart: false
// isAuxiliaryWindowFocusedContext: false
// isCenteredLayout: false
// isComposing: false
// isCurrentProfileTransient: false
// isDevelopment: false
// isDominatedByLongLines: false
// isFileSystemResource: true
// isFullscreen: false
// isIOS: false
// isInEmbeddedEditor: false
// isIssueTroubleshootActive: false
// isLinux: true
// isMac: false
// isMacNative: false
// isMobile: false
// isProfileExportInProgress: false
// isProfileImportInProgress: false
// isWeb: false
// isWindows: false
// isWordWrapMinified: false
// isWorkspaceTrustEnabled: true
// isWorkspaceTrusted: true
// issues:github.active: true
// issues:github.canMove: true
// issues:github.defaultViewLocation: true
// issues:github.visible: true
// jsBrowserBreakpoints.canMove: true
// jsBrowserBreakpoints.defaultViewLocation: true
// jsExcludedCallers.canMove: true
// jsExcludedCallers.defaultViewLocation: true
// jumpToCursorSupported: false
// keybindingFocus: false
// languageSupportsDisassembleRequest: true
// latex-workshop-commands.canMove: true
// latex-workshop-commands.defaultViewLocation: true
// latex-workshop-snippet-view.canMove: true
// latex-workshop-snippet-view.defaultViewLocation: true
// latex-workshop-structure.canMove: true
// latex-workshop-structure.defaultViewLocation: true
// listSupportsKeyboardNavigation: true
// listSupportsTypeNavigation: true
// liveshare.devtools.canMove: true
// liveshare.devtools.defaultViewLocation: true
// liveshare.help.canMove: true
// liveshare.help.defaultViewLocation: true
// liveshare.session.active: true
// liveshare.session.canMove: true
// liveshare.session.defaultViewLocation: true
// liveshare.session.explorer.canMove: true
// liveshare.session.explorer.defaultViewLocation: true
// liveshare.session.visible: true
// liveshare:hasSharedTerminals: false
// liveshare:isChatEnabled: true
// liveshare:isCollaborating: false
// liveshare:isNativeAuthEnabled: true
// liveshare:isNode: true
// liveshare:isServerShared: false
// liveshare:isTeamMember: false
// liveshare:isWeb: false
// liveshare:logsEnabled: false
// liveshare:showExplorer: true
// liveshare:showHelpViewlet: true
// liveshare:state: "SignedIn"
// lldb.excludedCallers.canMove: true
// lldb.excludedCallers.defaultViewLocation: true
// lldb.loadedModules.canMove: true
// lldb.loadedModules.defaultViewLocation: true
// loadedScriptsSupported: false
// logLevel: "info"
// mainEditorAreaVisible: true
// majorMinorUpdateAvailable: false
// makefile.outline.active: true
// makefile.outline.canMove: true
// makefile.outline.defaultViewLocation: true
// makefile.outline.visible: true
// mergeConflictsCount: 0
// multiCursorModifier: "ctrlCmd"
// multiSessionDebug: false
// multipleEditorGroups: false
// navigableContainerFocused: false
// notificationCenterVisible: false
// notificationToastsVisible: false
// npm.canMove: true
// npm.defaultViewLocation: true
// openDiffOnClick: true
// openFolderWorkspaceSupport: true
// operationInProgress: false
// outline.active: true
// outline.canMove: true
// outline.defaultViewLocation: true
// outline.visible: true
// outlineAllCollapsed: false
// outlineFiltersOnType: true
// outlineFollowsCursor: false
// outlineSortMode: 0
// panelAlignment: "center"
// panelFocus: false
// panelMaximized: false
// panelPosition: "left"
// panelVisible: false
// peacock:liveshare: true
// pr:github.active: true
// pr:github.canMove: true
// pr:github.defaultViewLocation: true
// pr:github.visible: true
// prStatus:github.canMove: true
// prStatus:github.defaultViewLocation: true
// processExecutionSupported: true
// productQualityType: "stable"
// profiles.enabled: true
// refactorPreview.canMove: false
// refactorPreview.defaultViewContainerLocation: true
// refactorPreview.defaultViewLocation: true
// refactorPreview.enabled: false
// references-view.tree.canMove: true
// references-view.tree.defaultViewLocation: true
// releaseNotesUrl: "https://go.microsoft.com/fwlink/?LinkID=533483#vscode"
// remoteConnectionState: ""
// remoteHub.views.workspaceRepositories.active: true
// remoteHub.views.workspaceRepositories.canMove: false
// remoteHub.views.workspaceRepositories.defaultViewLocation: true
// remoteHub.views.workspaceRepositories.visible: true
// remoteName: ""
// remoteTunnelConnection: "disconnected"
// replaceInputFocussed: false
// resource: "file:///home/bzm3r/bpaf/bpaf_derive/src/top.rs"
// resourceDirname: "/home/bzm3r/bpaf/bpaf_derive/src"
// resourceExtname: ".rs"
// resourceFilename: "top.rs"
// resourceLangId: "rust"
// resourcePath: "/home/bzm3r/bpaf/bpaf_derive/src/top.rs"
// resourceScheme: "file"
// resourceSet: true
// restartFrameSupported: false
// rustDependencies.active: true
// rustDependencies.canMove: true
// rustDependencies.defaultViewLocation: true
// rustDependencies.visible: true
// saveConflictResolutionContext: false
// scm.providerCount: 1
// scmActiveResourceHasChanges: false
// scmActiveResourceRepository: "scm0"
// scmRepositorySortKey: "discoveryTime"
// serverlessWebContext: false
// shareProviderCount: 13
// shellExecutionSupported: true
// sideBarFocus: false
// sideBarVisible: true
// sideBySideEditorActive: false
// splitEditorsVertically: false
// standaloneColorPickerFocused: false
// standaloneColorPickerVisible: false
// stepBackSupported: false
// stepIntoTargetsSupported: false
// stickyScrollFocused: false
// stickyScrollVisible: false
// suggestWidgetDetailsVisible: false
// suggestWidgetHasFocusedSuggestion: false
// suggestWidgetMultipleSuggestions: false
// suggestWidgetVisible: false
// suggestionCanResolve: false
// suggestionHasInsertAndReplaceRange: false
// suggestionInsertMode: "insert"
// suggestionMakesTextEdit: true
// supportedCodeAction: " quickfix refactor refactor.extract refactor.inline refactor.rewrite quickfix refactor.surround"
// suspendDebuggeeSupported: false
// syncEnabled: true
// syncStatus: "idle"
// targetsWsl.canMove: false
// targetsWsl.defaultViewLocation: true
// taskCommandsRegistered: true
// taskRunning: false
// temporaryWorkspace: false
// terminal.active: true
// terminal.canMove: true
// terminal.defaultViewContainerLocation: true
// terminal.defaultViewLocation: true
// terminal.visible: true
// terminalCount: 0
// terminalEditorActive: false
// terminalGroupCount: 0
// terminalHasBeenCreated: false
// terminalIsOpen: false
// terminalProcessSupported: true
// terminalSuggestWidgetVisible: false
// terminalWebExtensionContributedProfile: false
// terminateDebuggeeSupported: false
// testing.activeEditorHasTests: false
// testing.canRefresh: false
// testing.hasAnyResults: false
// testing.hasConfigurableProfile: false
// testing.hasCoverableTests: false
// testing.hasDebuggableTests: false
// testing.hasNonDefaultProfile: false
// testing.hasRunnableTests: false
// testing.isPeekVisible: false
// testing.isRefreshing: false
// testing.isRunning: false
// testing.isTestCoverageOpen: false
// testing.providerCount: 0
// testing.supportsContinuousRun: false
// textCompareEditorActive: false
// textCompareEditorVisible: false
// textInputFocus: true
// timeline.active: true
// timeline.canMove: true
// timeline.defaultViewLocation: true
// timeline.visible: true
// timelineExcludeSources: "[]"
// timelineFollowActiveEditor: true
// timelineHasProvider: true
// titleBarStyle: "custom"
// titleBarVisible: true
// treeView.github-actions.current-branch.enableCollapseAll: false
// treeView.github-actions.settings.enableCollapseAll: false
// treeView.github-actions.workflows.enableCollapseAll: false
// treeView.issues:github.enableCollapseAll: true
// treeView.liveshare.help.enableCollapseAll: false
// treeView.liveshare.session.enableCollapseAll: false
// treeView.liveshare.session.explorer.enableCollapseAll: false
// treeView.lldb.excludedCallers.enableCollapseAll: false
// treeView.lldb.loadedModules.enableCollapseAll: false
// treeView.pr:github.enableCollapseAll: true
// treeView.prStatus:github.enableCollapseAll: true
// treeView.rustDependencies.enableCollapseAll: true
// treeView.rustDependencies.enableRefresh: false
// treeView.rustDependencies.toggleCollapseAll: false
// treeView.workbench.views.editSessions.data.enableCollapseAll: true
// treeView.workbench.views.editSessions.data.enableRefresh: true
// treeView.workbench.views.sync.externalActivity.enableCollapseAll: false
// treeView.workbench.views.sync.externalActivity.enableRefresh: false
// treeView.workbench.views.sync.localActivity.enableCollapseAll: true
// treeView.workbench.views.sync.localActivity.enableRefresh: true
// treeView.workbench.views.sync.machines.enableRefresh: true
// treeView.workbench.views.sync.remoteActivity.enableCollapseAll: true
// treeView.workbench.views.sync.remoteActivity.enableRefresh: true
// treeView.workbench.views.sync.troubleshoot.enableRefresh: true
// typeHierarchyVisible: false
// updateState: "idle"
// userDataProfiles.defaultViewContainerLocation: true
// userDataSyncAccountStatus: "available"
// userDataSyncTurningOn: false
// userHasOpenedNotebook: true
// view.outline.visible: false
// view.rustDependencies.visible: false
// view.timeline.visible: false
// view.workbench.explorer.fileView.visible: true
// viewContainer.refactorPreview.enabled: false
// viewContainer.terminal.enabled: true
// viewContainer.userDataProfiles.enabled: false
// viewContainer.workbench.panel.chatSidebar.enabled: false
// viewContainer.workbench.panel.comments.enabled: true
// viewContainer.workbench.panel.markers.enabled: true
// viewContainer.workbench.panel.output.enabled: true
// viewContainer.workbench.panel.repl.enabled: true
// viewContainer.workbench.panel.testResults.enabled: false
// viewContainer.workbench.view.debug.enabled: true
// viewContainer.workbench.view.editSessions.enabled: false
// viewContainer.workbench.view.explorer.enabled: true
// viewContainer.workbench.view.extension.PowerShell.enabled: true
// viewContainer.workbench.view.extension.github-actions.enabled: true
// viewContainer.workbench.view.extension.github-pull-request.enabled: false
// viewContainer.workbench.view.extension.github-pull-requests.enabled: true
// viewContainer.workbench.view.extension.latex-workshop-activitybar.enabled: false
// viewContainer.workbench.view.extension.liveshare.enabled: true
// viewContainer.workbench.view.extension.makefile__viewContainer.enabled: true
// viewContainer.workbench.view.extension.references-view.enabled: false
// viewContainer.workbench.view.extension.test.enabled: false
// viewContainer.workbench.view.extensions.enabled: true
// viewContainer.workbench.view.remote.enabled: true
// viewContainer.workbench.view.scm.enabled: true
// viewContainer.workbench.view.search.enabled: true
// viewContainer.workbench.view.sync.enabled: false
// viewContainer.~remote.forwardedPortsContainer.enabled: true
// viewHasSomeCollapsibleItem: true
// virtualWorkspace: ""
// whenFocus: false
// workbench.accounts.experimental.showEntitlements: true
// workbench.debug.breakPointsView.active: false
// workbench.debug.breakPointsView.canMove: true
// workbench.debug.breakPointsView.defaultViewLocation: true
// workbench.debug.breakPointsView.visible: false
// workbench.debug.callStackView.active: false
// workbench.debug.callStackView.canMove: true
// workbench.debug.callStackView.defaultViewLocation: true
// workbench.debug.callStackView.visible: false
// workbench.debug.loadedScriptsView.canMove: true
// workbench.debug.loadedScriptsView.defaultViewLocation: true
// workbench.debug.variablesView.active: false
// workbench.debug.variablesView.canMove: true
// workbench.debug.variablesView.defaultViewLocation: true
// workbench.debug.variablesView.visible: false
// workbench.debug.watchExpressionsView.active: false
// workbench.debug.watchExpressionsView.canMove: true
// workbench.debug.watchExpressionsView.defaultViewLocation: true
// workbench.debug.watchExpressionsView.visible: false
// workbench.debug.welcome.active: true
// workbench.debug.welcome.canMove: false
// workbench.debug.welcome.defaultViewLocation: true
// workbench.debug.welcome.visible: true
// workbench.explorer.fileView.active: true
// workbench.explorer.fileView.canMove: true
// workbench.explorer.fileView.defaultViewLocation: true
// workbench.explorer.fileView.visible: true
// workbench.explorer.openEditorsView.active: true
// workbench.explorer.openEditorsView.canMove: true
// workbench.explorer.openEditorsView.defaultViewLocation: true
// workbench.panel.chatSidebar.defaultViewContainerLocation: true
// workbench.panel.comments.active: true
// workbench.panel.comments.canMove: true
// workbench.panel.comments.defaultViewContainerLocation: true
// workbench.panel.comments.defaultViewLocation: true
// workbench.panel.comments.visible: true
// workbench.panel.markers.defaultViewContainerLocation: true
// workbench.panel.markers.view.active: true
// workbench.panel.markers.view.canMove: true
// workbench.panel.markers.view.defaultViewLocation: true
// workbench.panel.markers.view.visible: true
// workbench.panel.output.active: true
// workbench.panel.output.canMove: true
// workbench.panel.output.defaultViewContainerLocation: true
// workbench.panel.output.defaultViewLocation: true
// workbench.panel.output.visible: true
// workbench.panel.repl.defaultViewContainerLocation: true
// workbench.panel.repl.view.active: true
// workbench.panel.repl.view.canMove: true
// workbench.panel.repl.view.defaultViewLocation: true
// workbench.panel.repl.view.visible: true
// workbench.panel.testResults.defaultViewContainerLocation: true
// workbench.panel.testResults.view.canMove: true
// workbench.panel.testResults.view.defaultViewLocation: true
// workbench.scm.active: true
// workbench.scm.canMove: true
// workbench.scm.defaultViewLocation: true
// workbench.scm.repositories.active: true
// workbench.scm.repositories.canMove: true
// workbench.scm.repositories.defaultViewLocation: true
// workbench.scm.visible: true
// workbench.view.debug.defaultViewContainerLocation: true
// workbench.view.editSessions.defaultViewContainerLocation: true
// workbench.view.explorer.defaultViewContainerLocation: true
// workbench.view.extension.PowerShell.defaultViewContainerLocation: true
// workbench.view.extension.github-actions.defaultViewContainerLocation: true
// workbench.view.extension.github-pull-request.defaultViewContainerLocation: true
// workbench.view.extension.github-pull-requests.defaultViewContainerLocation: true
// workbench.view.extension.latex-workshop-activitybar.defaultViewContainerLocation: true
// workbench.view.extension.liveshare.defaultViewContainerLocation: true
// workbench.view.extension.makefile__viewContainer.defaultViewContainerLocation: true
// workbench.view.extension.references-view.defaultViewContainerLocation: true
// workbench.view.extension.test.defaultViewContainerLocation: true
// workbench.view.extensions.defaultViewContainerLocation: true
// workbench.view.remote.defaultViewContainerLocation: true
// workbench.view.scm.defaultViewContainerLocation: false
// workbench.view.search.active: true
// workbench.view.search.canMove: true
// workbench.view.search.defaultViewContainerLocation: true
// workbench.view.search.defaultViewLocation: true
// workbench.view.search.visible: true
// workbench.view.sync.defaultViewContainerLocation: true
// workbench.view.testCoverage.canMove: true
// workbench.view.testCoverage.defaultViewLocation: true
// workbench.view.testing.canMove: true
// workbench.view.testing.defaultViewLocation: true
// workbench.views.editSessions.data.canMove: false
// workbench.views.editSessions.data.defaultViewLocation: true
// workbench.views.extensions.builtinFeatureExtensions.canMove: false
// workbench.views.extensions.builtinFeatureExtensions.defaultViewLocation: true
// workbench.views.extensions.builtinProgrammingLanguageExtensions.canMove: false
// workbench.views.extensions.builtinProgrammingLanguageExtensions.defaultViewLocation: true
// workbench.views.extensions.builtinThemeExtensions.canMove: false
// workbench.views.extensions.builtinThemeExtensions.defaultViewLocation: true
// workbench.views.extensions.deprecatedExtensions.canMove: false
// workbench.views.extensions.deprecatedExtensions.defaultViewLocation: true
// workbench.views.extensions.disabled.canMove: false
// workbench.views.extensions.disabled.defaultViewLocation: true
// workbench.views.extensions.enabled.canMove: false
// workbench.views.extensions.enabled.defaultViewLocation: true
// workbench.views.extensions.installed.canMove: false
// workbench.views.extensions.installed.defaultViewLocation: true
// workbench.views.extensions.marketplace.canMove: false
// workbench.views.extensions.marketplace.defaultViewLocation: true
// workbench.views.extensions.otherRecommendations.canMove: false
// workbench.views.extensions.otherRecommendations.defaultViewLocation: true
// workbench.views.extensions.popular.canMove: false
// workbench.views.extensions.popular.defaultViewLocation: true
// workbench.views.extensions.searchBuiltin.canMove: false
// workbench.views.extensions.searchBuiltin.defaultViewLocation: true
// workbench.views.extensions.searchDisabled.canMove: false
// workbench.views.extensions.searchDisabled.defaultViewLocation: true
// workbench.views.extensions.searchEnabled.canMove: false
// workbench.views.extensions.searchEnabled.defaultViewLocation: true
// workbench.views.extensions.searchInstalled.canMove: false
// workbench.views.extensions.searchInstalled.defaultViewLocation: true
// workbench.views.extensions.searchOutdated.canMove: false
// workbench.views.extensions.searchOutdated.defaultViewLocation: true
// workbench.views.extensions.searchRecentlyUpdated.canMove: false
// workbench.views.extensions.searchRecentlyUpdated.defaultViewLocation: true
// workbench.views.extensions.searchWorkspaceUnsupported.canMove: false
// workbench.views.extensions.searchWorkspaceUnsupported.defaultViewLocation: true
// workbench.views.extensions.untrustedPartiallySupportedExtensions.canMove: false
// workbench.views.extensions.untrustedPartiallySupportedExtensions.defaultViewLocation: true
// workbench.views.extensions.untrustedUnsupportedExtensions.canMove: false
// workbench.views.extensions.untrustedUnsupportedExtensions.defaultViewLocation: true
// workbench.views.extensions.virtualPartiallySupportedExtensions.canMove: false
// workbench.views.extensions.virtualPartiallySupportedExtensions.defaultViewLocation: true
// workbench.views.extensions.virtualUnsupportedExtensions.canMove: false
// workbench.views.extensions.virtualUnsupportedExtensions.defaultViewLocation: true
// workbench.views.extensions.workspaceRecommendations.canMove: false
// workbench.views.extensions.workspaceRecommendations.defaultViewLocation: true
// workbench.views.sync.conflicts.canMove: false
// workbench.views.sync.conflicts.defaultViewLocation: true
// workbench.views.sync.externalActivity.canMove: false
// workbench.views.sync.externalActivity.defaultViewLocation: true
// workbench.views.sync.localActivity.canMove: false
// workbench.views.sync.localActivity.defaultViewLocation: true
// workbench.views.sync.machines.canMove: false
// workbench.views.sync.machines.defaultViewLocation: true
// workbench.views.sync.remoteActivity.canMove: false
// workbench.views.sync.remoteActivity.defaultViewLocation: true
// workbench.views.sync.troubleshoot.canMove: false
// workbench.views.sync.troubleshoot.defaultViewLocation: true
// workbenchState: "folder"
// workspaceFolderCount: 1
// workspaceHasCommenting: true
// workspacePlatform: "linux"
// xmlTreeView.canMove: true
// xmlTreeView.defaultViewLocation: true
// ~remote.forwardedPorts.active: true
// ~remote.forwardedPorts.canMove: true
// ~remote.forwardedPorts.defaultViewLocation: true
// ~remote.forwardedPorts.visible: true
// ~remote.forwardedPortsContainer.defaultViewContainerLocation: true